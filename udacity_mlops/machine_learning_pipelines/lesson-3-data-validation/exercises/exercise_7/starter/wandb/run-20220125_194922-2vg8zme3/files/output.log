[1mcollecting 3 items                                                             [0m[1mcollected 3 items                                                              [0m

test_data.py::test_column_presence_and_type [31mERROR[0m
test_data.py::test_class_names [31mERROR[0m
test_data.py::test_column_ranges [31mERROR[0m

==================================== ERRORS ====================================
[31m[1m_______________ ERROR at setup of test_column_presence_and_type ________________[0m

args = (<wandb.apis.public.Api object at 0x7f3dce950850>,)
kwargs = {'name': 'exercise_5/preprocessed_data.csv:latest', 'type': None}
message = 'Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"'
payload = 'Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"'

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <wandb.apis.public.Api object at 0x7f3dce950850>
name = 'exercise_5/preprocessed_data.csv:latest', type = None

    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
    
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>
client = <wandb.apis.public.RetryingClient object at 0x7f3dce976370>
entity = 'pedrovaz', project = 'exercise_5'
name = 'preprocessed_data.csv:latest', attrs = None

    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._attrs = attrs
        if self._attrs is None:
>           self._load()

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:2583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>

    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String!,
            $projectName: String!,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
                raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
        if (
            response is None
            or response.get("project") is None
            or response["project"].get("artifact") is None
        ):
>           raise ValueError(
                'Project %s/%s does not contain artifact: "%s"'
                % (self.entity, self.project, self._artifact_name)
            )
[1m[31mE           ValueError: Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"[0m

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:3097: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

    @pytest.fixture(scope="session")
    def data():
    
>       local_path = run.use_artifact("exercise_5/preprocessed_data.csv:latest").file()

[1m[31mtest_data.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/sdk/wandb_run.py[0m:1957: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:62: in wrapper
    six.reraise(CommError, CommError(message, err), sys.exc_info()[2])
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/six.py[0m:718: in reraise
    raise value.with_traceback(tb)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:24: in wrapper
    return func(*args, **kwargs)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:520: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:2583: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>

    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String!,
            $projectName: String!,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
                raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
        if (
            response is None
            or response.get("project") is None
            or response["project"].get("artifact") is None
        ):
>           raise ValueError(
                'Project %s/%s does not contain artifact: "%s"'
                % (self.entity, self.project, self._artifact_name)
            )
[1m[31mE           wandb.errors.error.CommError: Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"[0m

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:3097: CommError
[31m[1m______________________ ERROR at setup of test_class_names ______________________[0m

args = (<wandb.apis.public.Api object at 0x7f3dce950850>,)
kwargs = {'name': 'exercise_5/preprocessed_data.csv:latest', 'type': None}
message = 'Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"'
payload = 'Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"'

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <wandb.apis.public.Api object at 0x7f3dce950850>
name = 'exercise_5/preprocessed_data.csv:latest', type = None

    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
    
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>
client = <wandb.apis.public.RetryingClient object at 0x7f3dce976370>
entity = 'pedrovaz', project = 'exercise_5'
name = 'preprocessed_data.csv:latest', attrs = None

    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._attrs = attrs
        if self._attrs is None:
>           self._load()

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:2583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>

    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String!,
            $projectName: String!,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
                raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
        if (
            response is None
            or response.get("project") is None
            or response["project"].get("artifact") is None
        ):
>           raise ValueError(
                'Project %s/%s does not contain artifact: "%s"'
                % (self.entity, self.project, self._artifact_name)
            )
[1m[31mE           ValueError: Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"[0m

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:3097: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

    @pytest.fixture(scope="session")
    def data():
    
>       local_path = run.use_artifact("exercise_5/preprocessed_data.csv:latest").file()

[1m[31mtest_data.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/sdk/wandb_run.py[0m:1957: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:62: in wrapper
    six.reraise(CommError, CommError(message, err), sys.exc_info()[2])
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/six.py[0m:718: in reraise
    raise value.with_traceback(tb)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:24: in wrapper
    return func(*args, **kwargs)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:520: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:2583: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>

    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String!,
            $projectName: String!,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
                raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
        if (
            response is None
            or response.get("project") is None
            or response["project"].get("artifact") is None
        ):
>           raise ValueError(
                'Project %s/%s does not contain artifact: "%s"'
                % (self.entity, self.project, self._artifact_name)
            )
[1m[31mE           wandb.errors.error.CommError: Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"[0m

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:3097: CommError
[31m[1m_____________________ ERROR at setup of test_column_ranges _____________________[0m

args = (<wandb.apis.public.Api object at 0x7f3dce950850>,)
kwargs = {'name': 'exercise_5/preprocessed_data.csv:latest', 'type': None}
message = 'Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"'
payload = 'Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"'

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <wandb.apis.public.Api object at 0x7f3dce950850>
name = 'exercise_5/preprocessed_data.csv:latest', type = None

    @normalize_exceptions
    def artifact(self, name, type=None):
        """
        Returns a single artifact by parsing path in the form `entity/project/run_id`.
    
        Arguments:
            name: (str) An artifact name. May be prefixed with entity/project. Valid names
                can be in the following forms:
                    name:version
                    name:alias
                    digest
            type: (str, optional) The type of artifact to fetch.
        Returns:
            A `Artifact` object.
        """
        if name is None:
            raise ValueError("You must specify name= to fetch an artifact.")
        entity, project, artifact_name = self._parse_artifact_path(name)
>       artifact = Artifact(self.client, entity, project, artifact_name)

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>
client = <wandb.apis.public.RetryingClient object at 0x7f3dce976370>
entity = 'pedrovaz', project = 'exercise_5'
name = 'preprocessed_data.csv:latest', attrs = None

    def __init__(self, client, entity, project, name, attrs=None):
        self.client = client
        self._entity = entity
        self._project = project
        self._artifact_name = name
        self._attrs = attrs
        if self._attrs is None:
>           self._load()

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:2583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>

    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String!,
            $projectName: String!,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
                raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
        if (
            response is None
            or response.get("project") is None
            or response["project"].get("artifact") is None
        ):
>           raise ValueError(
                'Project %s/%s does not contain artifact: "%s"'
                % (self.entity, self.project, self._artifact_name)
            )
[1m[31mE           ValueError: Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"[0m

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:3097: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

    @pytest.fixture(scope="session")
    def data():
    
>       local_path = run.use_artifact("exercise_5/preprocessed_data.csv:latest").file()

[1m[31mtest_data.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/sdk/wandb_run.py[0m:1957: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:62: in wrapper
    six.reraise(CommError, CommError(message, err), sys.exc_info()[2])
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/six.py[0m:718: in reraise
    raise value.with_traceback(tb)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/normalize.py[0m:24: in wrapper
    return func(*args, **kwargs)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:520: in artifact
    artifact = Artifact(self.client, entity, project, artifact_name)
[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:2583: in __init__
    self._load()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("'NoneType' object is not subscriptable") raised in repr()] Artifact object at 0x7f3dce976160>

    def _load(self):
        query = gql(
            """
        query Artifact(
            $entityName: String!,
            $projectName: String!,
            $name: String!
        ) {
            project(name: $projectName, entityName: $entityName) {
                artifact(name: $name) {
                    ...ArtifactFragment
                }
            }
        }
        %s
        """
            % ARTIFACT_FRAGMENT
        )
        response = None
        try:
            response = self.client.execute(
                query,
                variable_values={
                    "entityName": self.entity,
                    "projectName": self.project,
                    "name": self._artifact_name,
                },
            )
        except Exception:
            # we check for this after doing the call, since the backend supports raw digest lookups
            # which don't include ":" and are 32 characters long
            if ":" not in self._artifact_name and len(self._artifact_name) != 32:
                raise ValueError(
                    'Attempted to fetch artifact without alias (e.g. "<artifact_name>:v3" or "<artifact_name>:latest")'
                )
        if (
            response is None
            or response.get("project") is None
            or response["project"].get("artifact") is None
        ):
>           raise ValueError(
                'Project %s/%s does not contain artifact: "%s"'
                % (self.entity, self.project, self._artifact_name)
            )
[1m[31mE           wandb.errors.error.CommError: Project pedrovaz/exercise_5 does not contain artifact: "preprocessed_data.csv:latest"[0m

[1m[31m/home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/apis/public.py[0m:3097: CommError
[33m=============================== warnings summary ===============================[0m
../../../../../../../../miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/vendor/watchdog/utils/bricks.py:175
  /home/pedro.vaz/miniconda3/envs/mlflow-a3af6a16a95faee04af2c40a1852613ae4973185/lib/python3.9/site-packages/wandb/vendor/watchdog/utils/bricks.py:175: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    class OrderedSet(collections.MutableSet):

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
ERROR test_data.py::test_column_presence_and_type - wandb.errors.error.CommEr...
ERROR test_data.py::test_class_names - wandb.errors.error.CommError: Project ...
ERROR test_data.py::test_column_ranges - wandb.errors.error.CommError: Projec...
[31m========================= [33m1 warning[0m, [31m[1m3 errors[0m[31m in 6.75s[0m[31m =========================[0m
